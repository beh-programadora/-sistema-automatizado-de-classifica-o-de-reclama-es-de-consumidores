# Importação das bibliotecas necessárias
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
import re

# Download de stopwords do NLTK (executar uma vez)
nltk.download('stopwords')

# Função de pré-processamento de texto
def preprocess_text(text):
    # Remover caracteres especiais e números
    text = re.sub(r'\d+', '', text)
    text = re.sub(r'[^\w\s]', '', text)
    
    # Converter para minúsculas
    text = text.lower()
    
    # Remover stopwords e realizar stemming
    stop_words = set(stopwords.words('english'))
    words = text.split()
    stemmer = PorterStemmer()
    words = [stemmer.stem(word) for word in words if word not in stop_words]
    
    return ' '.join(words)

# Carregar o conjunto de dados
url = "https://drive.google.com/uc?id=1Yt8X9u62TWW-dkH4Kn-XYo4LegUcX_Ix"
data = pd.read_csv(url)

# Exibir as primeiras linhas do conjunto de dados
print(data.head())

# Pré-processamento dos textos
data['processed_text'] = data['text'].apply(preprocess_text)

# Dividir os dados em conjuntos de treino e teste
X = data['processed_text']
y = data['category']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vetorização dos textos usando TF-IDF
vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Treinamento do modelo Naive Bayes
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Realizar predições
y_pred = model.predict(X_test_tfidf)

# Avaliação do modelo
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f"Acurácia do Modelo: {accuracy:.2f}")
print("Matriz de Confusão:")
print(conf_matrix)
print("Relatório de Classificação:")
print(class_report)

# Identificar palavras mais importantes para cada categoria
feature_names = vectorizer.get_feature_names_out()
for i, category in enumerate(model.classes_):
    top10 = model.coef_[i].argsort()[-10:]
    print(f"\nPalavras mais importantes para a categoria '{category}':")
    for idx in top10:
        print(f"{feature_names[idx]}: {model.coef_[i][idx]:.4f}")
